name: CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  MySQL:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: '8.0'
      - run: mysql -uroot -h127.0.0.1 -e 8.0
      
      
  Dotnet:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo Dotnet
        uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
      - name: Install dependencies
        run: dotnet restore NistagramSQLConnection.csproj #-nowarn:msb3202,nu1503 -p:RestoreUseSkipNonexistentTargets=false
      - name: Build
        run: dotnet build NistagramSQLConnection.csproj --configuration release
      - name: Test
        run: dotnet test NistagramSQLConnection.csproj --configuration release
        
  SonarCloud:
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"dejan-xd-organization_NistagramSQLConnection" /o:"dejan-xd-organization" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet restore NistagramSQLConnection.csproj
          dotnet build NistagramSQLConnection.csproj --configuration release
          dotnet test NistagramSQLConnection.csproj --configuration release
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          
  Artifact:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo Dotnet
        uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        with:
          semantic_version: 15.13.28  # It is recommended to specify specifying version range
                                      # for semantic-release.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          append_to_pre_release_tag: ""
          default_bump: major    
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          prerelease: false    
      - name: Install dependencies
        run: dotnet restore NistagramSQLConnection.csproj #-nowarn:msb3202,nu1503 -p:RestoreUseSkipNonexistentTargets=false
      - name: Test with dotnet
        run: dotnet test NistagramSQLConnection.csproj --configuration release --logger:"liquid.md;LogFileName=${{github.workspace}}/${{env.file_name}};Title=${{env.title}};"
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        if: ${{always()}}
        with:
          name: 'test_artifacts'
          path: ${{github.workspace}}/${{env.file_name}}
      - name: Create directory results/artifacts 
        run: 'mkdir --parents results/artifacts'
      - name: Create ci-env.txt in path directory
        run: 'env | grep GITHUB_ | sort > results/artifacts/ci-env.txt'
      - uses: actions/upload-artifact@v2
        with:
            name: artifacts_from_ubuntu
            path: results/artifacts/
        
  Deploy:
    runs-on: ubuntu-latest
    needs: [Dotnet, SonarCloud, Artifact]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build
        uses: actions/download-artifact@v1
        with:
          name: artifacts_from_ubuntu
        
  Container:
    runs-on: ubuntu-latest
    needs: Deploy
    steps:
      - name: Checkout project
        uses: actions/checkout@master
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        with:
          semantic_version: 15.13.28  # It is recommended to specify specifying version range
                                      # for semantic-release.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Build image
        run: |
          docker build -t sql:latest -<<EOF
          FROM busybox
          RUN touch abc.txt
          EOF
      - name: Upload image
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: "sql:latest"
      - name: Download image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "sql:latest"
          
  Docker:
    runs-on: ubuntu-latest
    needs: Container
    steps:
      - name: Check Out Repo Docker
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        with:
          semantic_version: 15.13.28  # It is recommended to specify specifying version range
                                      # for semantic-release.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/sql
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/sql:latest
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
